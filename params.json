{
  "name": "Lexide",
  "tagline": "Ambiente de desenvolvimento para linguagem LEX",
  "body": "# LexIDE\r\n\r\nTem como objetivo a criação de uma linguagem de programação simples, apenas para aprendizagem. Inclui uma IDE.\r\n\r\n--\r\n\r\n###Data types\r\n| Data | Example |\r\n| ---- | ------- |\r\n| int | 16 |\r\n| string | \"Hello world!\" |\r\n| char | 'c' |\r\n| float | 10.23 |\r\n| vectors | int vet[] |\r\n\r\n###Control structures\r\n| Conditional clauses | Example |\r\n| ------------------- | ------- |\r\n| if | if (...) {...} |\r\n| if else | if... else {...} |\r\n\r\n| Loops | Example |\r\n| ----- | ------- |\r\n| while | while (...) {...} |\r\n| do while | do {...} while (...); |\r\n| for | fore (...) {...} |\r\n\r\n###Operators\r\n\r\n| Arithmetic | Example |\r\n| ---------- | ------- |\r\n| + | |\r\n| - | |\r\n| * | |\r\n| / | |\r\n| % | |\r\n\r\n| Logical | Example |\r\n| ------- | ------- |\r\n| > | |\r\n| < | |\r\n| >= | |\r\n| <= | |\r\n| = | |\r\n| == | |\r\n| != | |\r\n| || | |\r\n| && | |\r\n| \\| | |\r\n| ^ | |\r\n| & | |\r\n| ~ | |\r\n| >> | |\r\n| << | |\r\n\r\n###Semantic actions\r\n| what | id |\r\n| ---- | ------- |\r\n| name | #1 |\r\n| type | #2 |\r\n| inicialized | #3 |\r\n| used | #4 |\r\n| scope | #5 |\r\n| param | #6 |\r\n| position | #7 |\r\n| vector | #8 |\r\n| matrix | #9 |\r\n| ref | #10 |\r\n| func | #11 |\r\n| final line | #12 |\r\n| final scope | #13 |\r\n| final code | #14 |\r\n| assignment | #15 |\r\n| value | #16 |\r\n| index vector | #17 |\r\n| vector value| #18 |\r\n| read | #19 |\r\n| write | #20 |\r\n\r\n**final line:** detecta quando as informações para compor uma tupla da tabela já são o suficiente, por exemplo \";\".\r\n\r\n**final scope:** detecta o final de um escopo.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}